import Head from 'next/head'
import axios from "../components/axios";
import {useRouter} from "next/router";
import Profile from "../components/Profile";
import Cookies from 'js-cookie'
import TaskList from "../components/TaskList";
import CreateTask from "../components/CreateTask";
import DeleteAlert from "./../components/Alerts/DeleteAlert"
import {useState} from "react";

export async function getServerSideProps(context) {
    const cookies = context.req.headers.cookie?.split('; ').reduce((prevValue, currentValue) => {
        const key = currentValue.split('=')[0];
        prevValue[key] = currentValue.split('=')[1];
        return prevValue;
    }, {})
    if (!cookies?.token) {
        return {
            redirect: {
                destination: '/login',
                permanent: false
            }
        }
    }
    const response = await fetch("http://localhost:5000/api/users", {
        headers: {
            'Authorization': `Bearer ${cookies.token}`
        },
    })
    const data = await response.json()
    if (data.status === "error" || data.status === "fail") {
        return {
            redirect: {
                destination: '/login',
                permanent: false
            }
        }
    }
    return {
        props: {
            user: data.data.user,
            userTasks: data.data.user.tasks
        }
    }
}

export default function Home({user, userTasks}) {
    const router = useRouter()
    const [tasks, setTasks] = useState(userTasks)
    const [selectedTaskId, setSelectedTaskId] = useState()

    const [showDeleteUserAlert, setShowDeleteUserAlert] = useState(false)
    const [showDeleteTaskAlert, setShowDeleteTaskAlert] = useState(false)
    const [showDeleteAllAlert, setShowDeleteAllAlert] = useState(false)

    const logoutHandler = () => {
        axios.get('/users/logout',).then(response => {
            Cookies.remove('token')
            router.replace('/')
        }).catch(error => {
            console.log(error)
        })
    }

    const deleteUser = () => {
        setShowDeleteUserAlert(false)
        axios.delete('/users').then(response => {
            console.log(response)
            router.replace('/')
        }).catch(error => {
            console.log(error)
        })
    }

    const getTasks = () => {
        axios.get('/tasks').then(response => {
            console.log(response)
            setTasks(response.data.data?.tasks?.tasks)
        }).catch(error => {
            console.log(error)
        })
    }

    const createTask = (taskName) => {
        axios.post('/tasks', {name: taskName, status: "todo"}).then(response => {
            console.log(response)
            getTasks()
        }).catch(error => {
            console.log(error)
        })
    }

    const doTask = (_id, name, status) => {
        const newStatus = status === "todo" ? "finished" : "todo"
        axios.patch(`/tasks/${_id}`, {status: newStatus, name}).then(response => {
            console.log(response)
            getTasks()
        }).catch(error => {
            console.log(error)
        })
    }

    const deleteTask = (_id) => {
        setShowDeleteTaskAlert(false)
        axios.delete(`/tasks/${_id}`).then(response => {
            console.log(response)
            getTasks()
        }).catch(error => {
            console.log(error)
        })
    }

    const deleteAllTasks = () => {
        setShowDeleteAllAlert(false)
        axios.delete('/tasks').then(response => {
            console.log(response)
        }).catch(error => {
            console.log(error)
        })
    }

    return (
        <div>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className={'container p-4 bg-gray-50 min-h-screen flex'}>
                <DeleteAlert
                    show={showDeleteUserAlert}
                    title={"Deactivate account"}
                    text={"Are you sure you want to deactivate your account? All of your data will be                                           permanently removed from our servers forever. This action cannot be undone."}
                    confirm={deleteUser}
                    cancel={() => setShowDeleteUserAlert(false)}
                />
                <DeleteAlert
                    show={showDeleteTaskAlert}
                    title={"Delete Task"}
                    text={"Are you sure to delete this task. This action cannot be undone"}
                    confirm={() => deleteTask(selectedTaskId)}
                    cancel={() => setShowDeleteTaskAlert(false)}
                />
                <DeleteAlert
                    show={showDeleteAllAlert}
                    title={"Delete All Tasks"}
                    text={"Are you sure to delete all of your tasks. This action cannot be undone"}
                    confirm={() => deleteAllTasks()}
                    cancel={() => setShowDeleteAllAlert(false)}
                />
                <div className={"items-center flex flex-col"}>
                    <Profile name={user.name}
                             email={user.email}
                             editUser={() => {
                             }}
                             deleteUser={() => setShowDeleteUserAlert(true)}
                    />
                    <button type="button" onClick={() => setShowDeleteAllAlert(true)}
                            className="w-40 mb-2 px-4 py-2 text-base transition duration-200 border border-red-700 rounded-lg bg-white text-red-700 hover:bg-red-700 hover:text-white">
                        Delete All Tasks
                    </button>
                    <button type="button" onClick={logoutHandler}
                            className="w-40 px-4 py-2 text-base transition duration-200 border border-red-700 rounded-lg bg-white text-red-700 hover:bg-red-700 hover:text-white">
                        Log out
                    </button>
                </div>
                <div className={"w-full mb-8"}>
                    <CreateTask createTask={(taskName) => createTask(taskName)}/>
                    <div className={"flex w-full"}>
                        <TaskList tasks={tasks?.filter(task => task.status === "todo")}
                                  deleteTaskHandler={(_id) => {
                                      setSelectedTaskId(_id)
                                      setShowDeleteTaskAlert(true)
                                  }}
                                  doTask={(_id, name, status) => doTask(_id, name, status)}
                        />
                        <TaskList tasks={tasks?.filter(task => task.status === "finished")}
                                  deleteTaskHandler={(_id) => {
                                      setSelectedTaskId(_id)
                                      setShowDeleteTaskAlert(true)
                                  }}
                                  doTask={(_id, name, status) => doTask(_id, name, status)}
                        />
                    </div>
                </div>
            </main>
        </div>
    )
}
